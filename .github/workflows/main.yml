name: Send Daily Logistics Newsletter

on:
  schedule:
    # 한국 시간(KST)으로 매일 아침 8시에 실행 (UTC 기준 23시)
    - cron: '0 23 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip  # 캐시할 폴더 경로 (pip의 다운로드 폴더)
        # requirements.txt 파일 내용이 바뀔 때만 캐시를 새로 만듦
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        

    - name: Install dependencies
      run: |
        echo "--- Checking requirements.txt content ---"
        cat requirements.txt
        echo "---------------------------------------"
       
        python -m pip install --upgrade pip
       
        # --- ⬇️⬇️⬇️ [수정] pip 캐시 삭제 명령어 추가 ⬇️⬇️⬇️ ---
        pip cache purge
        # --- ⬆️⬆️⬆️ [수정] 여기까지 ⬆️⬆️⬆️ ---
        pip install -r requirements.txt -v  # <-- [추가] verbose 로그로 의존성 해결 과정 상세 출력. 반복 에러 분석에 사용.
    - name: Install Korean font (Nanum Gothic)
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-nanum  # NanumGothic 폰트 설치
        sudo fc-cache -fv  # 폰트 캐시 갱신
        if fc-list | grep -i "NanumGothic"; then
          echo "NanumGothic 설치 성공"
        else
          echo "NanumGothic 설치 실패"
        fi  # 설치 성공 여부 로그 출력
    - name: Create credential files from secrets
      run: |
        echo "${{ secrets.GMAIL_CREDENTIALS }}" > credentials.json
        echo "${{ secrets.GMAIL_TOKEN }}" | base64 --decode > token.json

    - name: Run script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        RECIPIENT_LIST: ${{ secrets.RECIPIENT_LIST }}
        OPINET_API_KEY: ${{ secrets.OPINET_API_KEY }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
      run: python news_collector.py

    - name: Check generated files
      run: |
        echo "--- Listing files in archive directory ---"
        ls -R archive
    
    # 6. 변경된 파일들(기록, 아카이브)을 자동으로 저장소에 커밋
    - name: Commit and push updated files
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "chore: Update newsletter history and archive"
        # 저장할 파일들을 정확히 지정
        file_pattern: "sent_links_logistics.txt previous_newsletter.json archive"
      

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and push changes
      run: |
        git pull
        git add .
        git diff-index --quiet HEAD || (git commit -m "Update sent links history" && git push)
